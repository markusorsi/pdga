import random
from typing import Tuple
from .crossover import CrossoverOperator

class SinglePoint(CrossoverOperator):
    """
    A crossover operator that performs single-point crossover.

    This operator splits each parent sequence at a randomly selected crossover point and then
    combines the segments to form two offspring sequences. It then sanitizes the offspring using
    the base class's `sanitize_offspring` method to ensure feasibility.
    
    Attributes:
        name (str): Unique identifier for this crossover operator.
    """
    name = 'single_point'

    def crossover(self, parent1: str, parent2: str) -> Tuple[str, str]:
        """
        Perform single-point crossover between two parent sequences.

        The operator splits the parent sequences at a randomly chosen crossover point and creates
        two offspring by exchanging the tail segments. If either parent does not have at least two
        segments (separated by hyphens), the crossover is not performed and the original parents are returned.

        Args:
            parent1 (str): The first parent sequence.
            parent2 (str): The second parent sequence.

        Returns:
            Tuple[str, str]: Two offspring sequences generated by single-point crossover,
            sanitized to enforce feasibility constraints.
        """
        parent1_parts = parent1.split('-')
        parent2_parts = parent2.split('-')

        # If either parent has fewer than 2 parts, crossover is not possible.
        if len(parent1_parts) < 2 or len(parent2_parts) < 2:
            return parent1, parent2

        # Choose a random crossover point for parent1.
        crossover_point = random.randint(1, len(parent1_parts) - 1)
        offspring1 = '-'.join(parent1_parts[:crossover_point] + parent2_parts[crossover_point:])
        offspring2 = '-'.join(parent2_parts[:crossover_point] + parent1_parts[crossover_point:])

        # Sanitize the offspring using the base class's method.
        offspring1 = self.sanitize_offspring(offspring1)
        offspring2 = self.sanitize_offspring(offspring2)

        return offspring1, offspring2
